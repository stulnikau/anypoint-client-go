/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInfo{}

// NodeInfo struct for NodeInfo
type NodeInfo struct {
	Id string `json:"id"`
	Location string `json:"location"`
	IsAvailableForDeployments bool `json:"isAvailableForDeployments"`
	// If set to \"AVAILABLE\" the cluster will accept deployments
	Availability *string `json:"availability,omitempty"`
}

// NewNodeInfo instantiates a new NodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInfo(id string, location string, isAvailableForDeployments bool) *NodeInfo {
	this := NodeInfo{}
	this.Id = id
	this.Location = location
	this.IsAvailableForDeployments = isAvailableForDeployments
	return &this
}

// NewNodeInfoWithDefaults instantiates a new NodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInfoWithDefaults() *NodeInfo {
	this := NodeInfo{}
	return &this
}

// GetId returns the Id field value
func (o *NodeInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodeInfo) SetId(v string) {
	o.Id = v
}

// GetLocation returns the Location field value
func (o *NodeInfo) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *NodeInfo) SetLocation(v string) {
	o.Location = v
}

// GetIsAvailableForDeployments returns the IsAvailableForDeployments field value
func (o *NodeInfo) GetIsAvailableForDeployments() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAvailableForDeployments
}

// GetIsAvailableForDeploymentsOk returns a tuple with the IsAvailableForDeployments field value
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetIsAvailableForDeploymentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAvailableForDeployments, true
}

// SetIsAvailableForDeployments sets field value
func (o *NodeInfo) SetIsAvailableForDeployments(v bool) {
	o.IsAvailableForDeployments = v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *NodeInfo) GetAvailability() string {
	if o == nil || IsNil(o.Availability) {
		var ret string
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *NodeInfo) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given string and assigns it to the Availability field.
func (o *NodeInfo) SetAvailability(v string) {
	o.Availability = &v
}

func (o NodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["location"] = o.Location
	toSerialize["isAvailableForDeployments"] = o.IsAvailableForDeployments
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	return toSerialize, nil
}

type NullableNodeInfo struct {
	value *NodeInfo
	isSet bool
}

func (v NullableNodeInfo) Get() *NodeInfo {
	return v.value
}

func (v *NullableNodeInfo) Set(val *NodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInfo(val *NodeInfo) *NullableNodeInfo {
	return &NullableNodeInfo{value: val, isSet: true}
}

func (v NullableNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


