/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Items10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Items10{}

// Items10 Details of certificate.
type Items10 struct {
	Issuer Issuer `json:"issuer"`
	Subject Subject `json:"subject"`
	// Collection of subject alternative names from the SubjectAltName x509 extension
	SubjectAlternativeName []string `json:"subjectAlternativeName,omitempty"`
	Version string `json:"version"`
	// Serial number assigned by the CA to this certificate, in hex format
	SerialNumber string `json:"serialNumber"`
	// Name of the signature algorithm
	SignatureAlgorithm string `json:"signatureAlgorithm"`
	// The standard algorithm name for the public key of this certificate
	PublicKeyAlgorithm string `json:"publicKeyAlgorithm"`
	BasicConstraints *Items10BasicConstraints `json:"basicConstraints,omitempty"`
	Validity Validity `json:"validity"`
	// A list of values defining the purpose of the public key i.e. the key usage extensions from this certificate
	KeyUsage []string `json:"keyUsage,omitempty"`
	// A list of values providing details about the extended key usage extensions from this certificate.
	ExtendedKeyUsage []string `json:"extendedKeyUsage,omitempty"`
	// The type of this certificate
	CertificateType string `json:"certificateType"`
}

// NewItems10 instantiates a new Items10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItems10(issuer Issuer, subject Subject, version string, serialNumber string, signatureAlgorithm string, publicKeyAlgorithm string, validity Validity, certificateType string) *Items10 {
	this := Items10{}
	this.Issuer = issuer
	this.Subject = subject
	this.Version = version
	this.SerialNumber = serialNumber
	this.SignatureAlgorithm = signatureAlgorithm
	this.PublicKeyAlgorithm = publicKeyAlgorithm
	this.Validity = validity
	this.CertificateType = certificateType
	return &this
}

// NewItems10WithDefaults instantiates a new Items10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItems10WithDefaults() *Items10 {
	this := Items10{}
	return &this
}

// GetIssuer returns the Issuer field value
func (o *Items10) GetIssuer() Issuer {
	if o == nil {
		var ret Issuer
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *Items10) GetIssuerOk() (*Issuer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *Items10) SetIssuer(v Issuer) {
	o.Issuer = v
}

// GetSubject returns the Subject field value
func (o *Items10) GetSubject() Subject {
	if o == nil {
		var ret Subject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *Items10) GetSubjectOk() (*Subject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *Items10) SetSubject(v Subject) {
	o.Subject = v
}

// GetSubjectAlternativeName returns the SubjectAlternativeName field value if set, zero value otherwise.
func (o *Items10) GetSubjectAlternativeName() []string {
	if o == nil || IsNil(o.SubjectAlternativeName) {
		var ret []string
		return ret
	}
	return o.SubjectAlternativeName
}

// GetSubjectAlternativeNameOk returns a tuple with the SubjectAlternativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items10) GetSubjectAlternativeNameOk() ([]string, bool) {
	if o == nil || IsNil(o.SubjectAlternativeName) {
		return nil, false
	}
	return o.SubjectAlternativeName, true
}

// HasSubjectAlternativeName returns a boolean if a field has been set.
func (o *Items10) HasSubjectAlternativeName() bool {
	if o != nil && !IsNil(o.SubjectAlternativeName) {
		return true
	}

	return false
}

// SetSubjectAlternativeName gets a reference to the given []string and assigns it to the SubjectAlternativeName field.
func (o *Items10) SetSubjectAlternativeName(v []string) {
	o.SubjectAlternativeName = v
}

// GetVersion returns the Version field value
func (o *Items10) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Items10) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Items10) SetVersion(v string) {
	o.Version = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *Items10) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *Items10) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *Items10) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *Items10) GetSignatureAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *Items10) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *Items10) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value
func (o *Items10) GetPublicKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *Items10) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyAlgorithm, true
}

// SetPublicKeyAlgorithm sets field value
func (o *Items10) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = v
}

// GetBasicConstraints returns the BasicConstraints field value if set, zero value otherwise.
func (o *Items10) GetBasicConstraints() Items10BasicConstraints {
	if o == nil || IsNil(o.BasicConstraints) {
		var ret Items10BasicConstraints
		return ret
	}
	return *o.BasicConstraints
}

// GetBasicConstraintsOk returns a tuple with the BasicConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items10) GetBasicConstraintsOk() (*Items10BasicConstraints, bool) {
	if o == nil || IsNil(o.BasicConstraints) {
		return nil, false
	}
	return o.BasicConstraints, true
}

// HasBasicConstraints returns a boolean if a field has been set.
func (o *Items10) HasBasicConstraints() bool {
	if o != nil && !IsNil(o.BasicConstraints) {
		return true
	}

	return false
}

// SetBasicConstraints gets a reference to the given Items10BasicConstraints and assigns it to the BasicConstraints field.
func (o *Items10) SetBasicConstraints(v Items10BasicConstraints) {
	o.BasicConstraints = &v
}

// GetValidity returns the Validity field value
func (o *Items10) GetValidity() Validity {
	if o == nil {
		var ret Validity
		return ret
	}

	return o.Validity
}

// GetValidityOk returns a tuple with the Validity field value
// and a boolean to check if the value has been set.
func (o *Items10) GetValidityOk() (*Validity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validity, true
}

// SetValidity sets field value
func (o *Items10) SetValidity(v Validity) {
	o.Validity = v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *Items10) GetKeyUsage() []string {
	if o == nil || IsNil(o.KeyUsage) {
		var ret []string
		return ret
	}
	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items10) GetKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyUsage) {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *Items10) HasKeyUsage() bool {
	if o != nil && !IsNil(o.KeyUsage) {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given []string and assigns it to the KeyUsage field.
func (o *Items10) SetKeyUsage(v []string) {
	o.KeyUsage = v
}

// GetExtendedKeyUsage returns the ExtendedKeyUsage field value if set, zero value otherwise.
func (o *Items10) GetExtendedKeyUsage() []string {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		var ret []string
		return ret
	}
	return o.ExtendedKeyUsage
}

// GetExtendedKeyUsageOk returns a tuple with the ExtendedKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items10) GetExtendedKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		return nil, false
	}
	return o.ExtendedKeyUsage, true
}

// HasExtendedKeyUsage returns a boolean if a field has been set.
func (o *Items10) HasExtendedKeyUsage() bool {
	if o != nil && !IsNil(o.ExtendedKeyUsage) {
		return true
	}

	return false
}

// SetExtendedKeyUsage gets a reference to the given []string and assigns it to the ExtendedKeyUsage field.
func (o *Items10) SetExtendedKeyUsage(v []string) {
	o.ExtendedKeyUsage = v
}

// GetCertificateType returns the CertificateType field value
func (o *Items10) GetCertificateType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value
// and a boolean to check if the value has been set.
func (o *Items10) GetCertificateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateType, true
}

// SetCertificateType sets field value
func (o *Items10) SetCertificateType(v string) {
	o.CertificateType = v
}

func (o Items10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Items10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issuer"] = o.Issuer
	toSerialize["subject"] = o.Subject
	if !IsNil(o.SubjectAlternativeName) {
		toSerialize["subjectAlternativeName"] = o.SubjectAlternativeName
	}
	toSerialize["version"] = o.Version
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	if !IsNil(o.BasicConstraints) {
		toSerialize["basicConstraints"] = o.BasicConstraints
	}
	toSerialize["validity"] = o.Validity
	if !IsNil(o.KeyUsage) {
		toSerialize["keyUsage"] = o.KeyUsage
	}
	if !IsNil(o.ExtendedKeyUsage) {
		toSerialize["extendedKeyUsage"] = o.ExtendedKeyUsage
	}
	toSerialize["certificateType"] = o.CertificateType
	return toSerialize, nil
}

type NullableItems10 struct {
	value *Items10
	isSet bool
}

func (v NullableItems10) Get() *Items10 {
	return v.value
}

func (v *NullableItems10) Set(val *Items10) {
	v.value = val
	v.isSet = true
}

func (v NullableItems10) IsSet() bool {
	return v.isSet
}

func (v *NullableItems10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItems10(val *Items10) *NullableItems10 {
	return &NullableItems10{value: val, isSet: true}
}

func (v NullableItems10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItems10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


