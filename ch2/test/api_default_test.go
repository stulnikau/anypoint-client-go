/*
CH2 Management API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPost(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var connectionId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDelete(context.Background(), orgId, privateSpaceId, connectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var connectionId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGet(context.Background(), orgId, privateSpaceId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var connectionId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatch(context.Background(), orgId, privateSpaceId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPost(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPost(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var vpnId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGet(context.Background(), orgId, privateSpaceId, vpnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var vpnId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDelete(context.Background(), orgId, privateSpaceId, vpnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var vpnId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatch(context.Background(), orgId, privateSpaceId, vpnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdDelete(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatch(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var contextId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDelete(context.Background(), orgId, privateSpaceId, contextId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var contextId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGet(context.Background(), orgId, privateSpaceId, contextId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var contextId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatch(context.Background(), orgId, privateSpaceId, contextId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPost(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPost(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGet(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tgwId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDelete(context.Background(), orgId, privateSpaceId, tgwId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tgwId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGet(context.Background(), orgId, privateSpaceId, tgwId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tgwId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatch(context.Background(), orgId, privateSpaceId, tgwId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tgwId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGet(context.Background(), orgId, privateSpaceId, tgwId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tgwId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatch(context.Background(), orgId, privateSpaceId, tgwId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdTargetsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdTargetsGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdTargetsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdTargetsIdGet(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdTransitgatewaysGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdTransitgatewaysGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdTransitgatewaysTgwIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var tgwId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdTransitgatewaysTgwIdDelete(context.Background(), orgId, tgwId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdTransitgatewaysTgwIdRoutesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var tgwId string

		httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdTransitgatewaysTgwIdRoutesGet(context.Background(), orgId, tgwId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
