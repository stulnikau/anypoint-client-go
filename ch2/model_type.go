/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelType{}

// ModelType struct for ModelType
type ModelType struct {
	// Human readable error description. 
	Message string `json:"message"`
	// Error list use to describe the set of validations that has failed. Only required in case HTTP error code is not enough to describe the failure case. 
	Errors []TypeErrorsInner `json:"errors,omitempty"`
}

// NewModelType instantiates a new ModelType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelType(message string) *ModelType {
	this := ModelType{}
	this.Message = message
	return &this
}

// NewModelTypeWithDefaults instantiates a new ModelType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelTypeWithDefaults() *ModelType {
	this := ModelType{}
	return &this
}

// GetMessage returns the Message field value
func (o *ModelType) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ModelType) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ModelType) SetMessage(v string) {
	o.Message = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ModelType) GetErrors() []TypeErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []TypeErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelType) GetErrorsOk() ([]TypeErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ModelType) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []TypeErrorsInner and assigns it to the Errors field.
func (o *ModelType) SetErrors(v []TypeErrorsInner) {
	o.Errors = v
}

func (o ModelType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableModelType struct {
	value *ModelType
	isSet bool
}

func (v NullableModelType) Get() *ModelType {
	return v.value
}

func (v *NullableModelType) Set(val *ModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelType(val *ModelType) *NullableModelType {
	return &NullableModelType{value: val, isSet: true}
}

func (v NullableModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


