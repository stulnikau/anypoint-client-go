/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrustStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustStore{}

// TrustStore struct for TrustStore
type TrustStore struct {
	Type string `json:"type"`
	DnList []Items10 `json:"dnList"`
	// name of the trust store file
	FileName string `json:"fileName"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
}

// NewTrustStore instantiates a new TrustStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustStore(type_ string, dnList []Items10, fileName string) *TrustStore {
	this := TrustStore{}
	this.Type = type_
	this.DnList = dnList
	this.FileName = fileName
	return &this
}

// NewTrustStoreWithDefaults instantiates a new TrustStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustStoreWithDefaults() *TrustStore {
	this := TrustStore{}
	return &this
}

// GetType returns the Type field value
func (o *TrustStore) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TrustStore) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TrustStore) SetType(v string) {
	o.Type = v
}

// GetDnList returns the DnList field value
func (o *TrustStore) GetDnList() []Items10 {
	if o == nil {
		var ret []Items10
		return ret
	}

	return o.DnList
}

// GetDnListOk returns a tuple with the DnList field value
// and a boolean to check if the value has been set.
func (o *TrustStore) GetDnListOk() ([]Items10, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnList, true
}

// SetDnList sets field value
func (o *TrustStore) SetDnList(v []Items10) {
	o.DnList = v
}

// GetFileName returns the FileName field value
func (o *TrustStore) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *TrustStore) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *TrustStore) SetFileName(v string) {
	o.FileName = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *TrustStore) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustStore) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *TrustStore) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *TrustStore) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

func (o TrustStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["dnList"] = o.DnList
	toSerialize["fileName"] = o.FileName
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	return toSerialize, nil
}

type NullableTrustStore struct {
	value *TrustStore
	isSet bool
}

func (v NullableTrustStore) Get() *TrustStore {
	return v.value
}

func (v *NullableTrustStore) Set(val *TrustStore) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustStore) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustStore(val *TrustStore) *NullableTrustStore {
	return &NullableTrustStore{value: val, isSet: true}
}

func (v NullableTrustStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


