/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SupportedRuntimeVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedRuntimeVersion{}

// SupportedRuntimeVersion struct for SupportedRuntimeVersion
type SupportedRuntimeVersion struct {
	// Identifier of the Base Version of the Runtime. For example, in the case of a patched 3.8.0 Mule Runtime, the base version is 3.8.0. This is the version that is used in order to get feature validations by the Anypoint Management Center. This is the information shown to customers and the one that has to be used in order to make deployments.
	BaseVersion string `json:"baseVersion"`
	// Identifier of the actual version of the runtime that is used for deployments.
	Tag string `json:"tag"`
	// Release date of the runtime tag that is used for deployments.
	ReleaseDate float32 `json:"releaseDate"`
	// Identifier of the oldest version of the runtime that can be used for deployments.
	MinimumTag string `json:"minimumTag"`
	// Href to get information about the particular asset. Only if supported.
	Href *string `json:"href,omitempty"`
}

// NewSupportedRuntimeVersion instantiates a new SupportedRuntimeVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedRuntimeVersion(baseVersion string, tag string, releaseDate float32, minimumTag string) *SupportedRuntimeVersion {
	this := SupportedRuntimeVersion{}
	this.BaseVersion = baseVersion
	this.Tag = tag
	this.ReleaseDate = releaseDate
	this.MinimumTag = minimumTag
	return &this
}

// NewSupportedRuntimeVersionWithDefaults instantiates a new SupportedRuntimeVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedRuntimeVersionWithDefaults() *SupportedRuntimeVersion {
	this := SupportedRuntimeVersion{}
	return &this
}

// GetBaseVersion returns the BaseVersion field value
func (o *SupportedRuntimeVersion) GetBaseVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseVersion
}

// GetBaseVersionOk returns a tuple with the BaseVersion field value
// and a boolean to check if the value has been set.
func (o *SupportedRuntimeVersion) GetBaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseVersion, true
}

// SetBaseVersion sets field value
func (o *SupportedRuntimeVersion) SetBaseVersion(v string) {
	o.BaseVersion = v
}

// GetTag returns the Tag field value
func (o *SupportedRuntimeVersion) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *SupportedRuntimeVersion) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *SupportedRuntimeVersion) SetTag(v string) {
	o.Tag = v
}

// GetReleaseDate returns the ReleaseDate field value
func (o *SupportedRuntimeVersion) GetReleaseDate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value
// and a boolean to check if the value has been set.
func (o *SupportedRuntimeVersion) GetReleaseDateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseDate, true
}

// SetReleaseDate sets field value
func (o *SupportedRuntimeVersion) SetReleaseDate(v float32) {
	o.ReleaseDate = v
}

// GetMinimumTag returns the MinimumTag field value
func (o *SupportedRuntimeVersion) GetMinimumTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinimumTag
}

// GetMinimumTagOk returns a tuple with the MinimumTag field value
// and a boolean to check if the value has been set.
func (o *SupportedRuntimeVersion) GetMinimumTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumTag, true
}

// SetMinimumTag sets field value
func (o *SupportedRuntimeVersion) SetMinimumTag(v string) {
	o.MinimumTag = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SupportedRuntimeVersion) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedRuntimeVersion) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SupportedRuntimeVersion) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SupportedRuntimeVersion) SetHref(v string) {
	o.Href = &v
}

func (o SupportedRuntimeVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedRuntimeVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["baseVersion"] = o.BaseVersion
	toSerialize["tag"] = o.Tag
	toSerialize["releaseDate"] = o.ReleaseDate
	toSerialize["minimumTag"] = o.MinimumTag
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	return toSerialize, nil
}

type NullableSupportedRuntimeVersion struct {
	value *SupportedRuntimeVersion
	isSet bool
}

func (v NullableSupportedRuntimeVersion) Get() *SupportedRuntimeVersion {
	return v.value
}

func (v *NullableSupportedRuntimeVersion) Set(val *SupportedRuntimeVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedRuntimeVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedRuntimeVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedRuntimeVersion(val *SupportedRuntimeVersion) *NullableSupportedRuntimeVersion {
	return &NullableSupportedRuntimeVersion{value: val, isSet: true}
}

func (v NullableSupportedRuntimeVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedRuntimeVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


