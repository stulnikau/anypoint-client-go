/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiOrganizationsOrgIdPrivatespacesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
}

func (r ApiOrganizationsOrgIdPrivatespacesGetRequest) Execute() ([]PrivateSpace, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesGet Method for OrganizationsOrgIdPrivatespacesGet

get the list of Private Spaces in the organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @return ApiOrganizationsOrgIdPrivatespacesGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesGet(ctx context.Context, orgId string) ApiOrganizationsOrgIdPrivatespacesGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return []PrivateSpace
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesGetExecute(r ApiOrganizationsOrgIdPrivatespacesGetRequest) ([]PrivateSpace, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrivateSpace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	generated *PrivateSpacePost
}

func (r ApiOrganizationsOrgIdPrivatespacesPostRequest) Generated(generated PrivateSpacePost) ApiOrganizationsOrgIdPrivatespacesPostRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPostRequest) Execute() (*PrivateSpace, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPostExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPost Method for OrganizationsOrgIdPrivatespacesPost

create a Private Space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @return ApiOrganizationsOrgIdPrivatespacesPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPost(ctx context.Context, orgId string) ApiOrganizationsOrgIdPrivatespacesPostRequest {
	return ApiOrganizationsOrgIdPrivatespacesPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return PrivateSpace
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPostExecute(r ApiOrganizationsOrgIdPrivatespacesPostRequest) (*PrivateSpace, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGet

get the AWS account Id a string value.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdAccountsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	connectionId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDelete Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDelete

delete the Private Space Connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param connectionId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDelete(ctx context.Context, orgId string, privateSpaceId string, connectionId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		connectionId: connectionId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	connectionId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGet

get the Private Space Connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param connectionId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGet(ctx context.Context, orgId string, privateSpaceId string, connectionId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		connectionId: connectionId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	connectionId string
	generated *PrivateSpaceConnectionPatch
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest) Generated(generated PrivateSpaceConnectionPatch) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest) Execute() (*PrivateSpaceConnection1, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatch Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatch

Update existing Private Space Connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param connectionId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatch(ctx context.Context, orgId string, privateSpaceId string, connectionId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		connectionId: connectionId,
	}
}

// Execute executes the request
//  @return PrivateSpaceConnection1
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatchRequest) (*PrivateSpaceConnection1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceConnection1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsConnectionIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetRequest) Execute() ([]PrivateSpaceConnection, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGet

get the list of Connections inside the private space.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return []PrivateSpaceConnection
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGetRequest) ([]PrivateSpaceConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrivateSpaceConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	generated *PrivateSpaceConnectionPost
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest) Generated(generated PrivateSpaceConnectionPost) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest) Execute() (*PrivateSpaceConnection, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPost Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPost

create a Private Space Connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPost(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return PrivateSpaceConnection
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPostRequest) (*PrivateSpaceConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostRequest) Execute() (*PrivateSpaceConnection, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPost Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPost

add a vpn to an existing connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPost(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return PrivateSpaceConnection
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPostRequest) (*PrivateSpaceConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/vpns"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	vendor *string
	platform *string
	software *string
	orgId string
	privateSpaceId string
	vpnId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest) Vendor(vendor string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest {
	r.vendor = &vendor
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest) Platform(platform string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest {
	r.platform = &platform
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest) Software(software string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest {
	r.software = &software
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param vpnId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGet(ctx context.Context, orgId string, privateSpaceId string, vpnId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdConnectionGuideGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/vpns/{vpnId}/connectionGuide"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterValueToString(r.vpnId, "vpnId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vendor == nil {
		return nil, reportError("vendor is required and must be specified")
	}
	if r.platform == nil {
		return nil, reportError("platform is required and must be specified")
	}
	if r.software == nil {
		return nil, reportError("software is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "vendor", r.vendor, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "platform", r.platform, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "software", r.software, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	vpnId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDelete Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDelete

delete a vpn from a connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param vpnId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDelete(ctx context.Context, orgId string, privateSpaceId string, vpnId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/vpns/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterValueToString(r.vpnId, "vpnId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	vpnId string
	generated *PrivateSpaceConnectionVpnPatch
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest) Generated(generated PrivateSpaceConnectionVpnPatch) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest) Execute() (*PrivateSpaceConnectionVpnPatch, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatch Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatch

delete a vpn from a connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param vpnId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatch(ctx context.Context, orgId string, privateSpaceId string, vpnId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return PrivateSpaceConnectionVpnPatch
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatchRequest) (*PrivateSpaceConnectionVpnPatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceConnectionVpnPatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdConnectionsVpnsVpnIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/connections/vpns/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterValueToString(r.vpnId, "vpnId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdDelete Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdDelete

delete the Private Space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdDelete(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdGet

get the Private Space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetRequest) Execute() (*IAMRole, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGet

get the IAM roles associated with the space.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return IAMRole
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGetRequest) (*IAMRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IAMRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdIamrolesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/iamroles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGet

download ingress logs in ascending order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdLogsIngressGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/logs/ingress"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	generated *PrivateSpacePatch
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest) Generated(generated PrivateSpacePatch) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest) Execute() (*PrivateSpace, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatch Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatch

Update existing Private Space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatch(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return PrivateSpace
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdPatchRequest) (*PrivateSpace, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	contextId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDelete Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDelete

delete the TLS context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param contextId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDelete(ctx context.Context, orgId string, privateSpaceId string, contextId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		contextId: contextId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/tlsContexts/{contextId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contextId"+"}", url.PathEscape(parameterValueToString(r.contextId, "contextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	contextId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGet

get the TLS context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param contextId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGet(ctx context.Context, orgId string, privateSpaceId string, contextId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		contextId: contextId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/tlsContexts/{contextId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contextId"+"}", url.PathEscape(parameterValueToString(r.contextId, "contextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	contextId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchRequest) Execute() (*PrivateSpaceTlsContext, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatch Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatch

Update an existing TLS context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param contextId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatch(ctx context.Context, orgId string, privateSpaceId string, contextId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		contextId: contextId,
	}
}

// Execute executes the request
//  @return PrivateSpaceTlsContext
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatchRequest) (*PrivateSpaceTlsContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceTlsContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsContextIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/tlsContexts/{contextId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contextId"+"}", url.PathEscape(parameterValueToString(r.contextId, "contextId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetRequest) Execute() ([]PrivateSpaceTlsContext, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGet

get the list of TLS contexts inside the private space.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return []PrivateSpaceTlsContext
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGetRequest) ([]PrivateSpaceTlsContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrivateSpaceTlsContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/tlsContexts"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	generated *map[string]interface{}
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest) Generated(generated map[string]interface{}) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest) Execute() (*PrivateSpaceTlsContext, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPost Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPost

create a TLS context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPost(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return PrivateSpaceTlsContext
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPostRequest) (*PrivateSpaceTlsContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceTlsContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTlsContextsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/tlsContexts"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetRequest) Execute() ([]PrivateSpaceTransitGateway, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGet

get list of TGW connections assocated with a private space.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return []PrivateSpaceTransitGateway
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGetRequest) ([]PrivateSpaceTransitGateway, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrivateSpaceTransitGateway
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	generated *PrivateSpaceTransitGatewayPost
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest) Generated(generated PrivateSpaceTransitGatewayPost) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest) Execute() (*PrivateSpaceTransitGateway, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPost Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPost

create a private space TGW connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPost(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
//  @return PrivateSpaceTransitGateway
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPostRequest) (*PrivateSpaceTransitGateway, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceTransitGateway
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGet

get TGW routes configured to private space.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGet(ctx context.Context, orgId string, privateSpaceId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysRoutesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	tgwId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDelete Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDelete

Detach a Transit Gateway from the Private Space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param tgwId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDelete(ctx context.Context, orgId string, privateSpaceId string, tgwId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		tgwId: tgwId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways/{tgwId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	tgwId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGet

Get the transitgateway
with id =
{transitgatewayId}


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param tgwId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGet(ctx context.Context, orgId string, privateSpaceId string, tgwId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		tgwId: tgwId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways/{tgwId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	tgwId string
	generated *PrivateSpaceTransitGatewayPatch
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest) Generated(generated PrivateSpaceTransitGatewayPatch) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest) Execute() (*PrivateSpaceTransitGateway, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatch Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatch

patch the Private Space TGW Connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param tgwId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatch(ctx context.Context, orgId string, privateSpaceId string, tgwId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		tgwId: tgwId,
	}
}

// Execute executes the request
//  @return PrivateSpaceTransitGateway
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatchRequest) (*PrivateSpaceTransitGateway, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSpaceTransitGateway
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways/{tgwId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	tgwId string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGet Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGet

get TGW routes configured to tgw connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param tgwId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGet(ctx context.Context, orgId string, privateSpaceId string, tgwId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		tgwId: tgwId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways/{tgwId}/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	privateSpaceId string
	tgwId string
	generated *[]string
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest) Generated(generated []string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest {
	r.generated = &generated
	return r
}

func (r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatch Method for OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatch

patch routes for a TGW connection.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @param privateSpaceId
 @param tgwId
 @return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatch(ctx context.Context, orgId string, privateSpaceId string, tgwId string) ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest {
	return ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		privateSpaceId: privateSpaceId,
		tgwId: tgwId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchExecute(r ApiOrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesPrivateSpaceIdTransitgatewaysTgwIdRoutesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/{privateSpaceId}/transitgateways/{tgwId}/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"privateSpaceId"+"}", url.PathEscape(parameterValueToString(r.privateSpaceId, "privateSpaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
}

func (r ApiOrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetExecute(r)
}

/*
OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGet Method for OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGet

get supported vpn configs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The Organization id where the Private Space lives.
 @return ApiOrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGet(ctx context.Context, orgId string) ApiOrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetRequest {
	return ApiOrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetExecute(r ApiOrganizationsOrgIdPrivatespacesSupportedVpnConfigsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdPrivatespacesSupportedVpnConfigsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/privatespaces/supportedVpnConfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdTargetsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
}

func (r ApiOrganizationsOrgIdTargetsGetRequest) Execute() ([]TargetInfo, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdTargetsGetExecute(r)
}

/*
OrganizationsOrgIdTargetsGet Method for OrganizationsOrgIdTargetsGet

get list of target deployments within an organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiOrganizationsOrgIdTargetsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdTargetsGet(ctx context.Context, orgId string) ApiOrganizationsOrgIdTargetsGetRequest {
	return ApiOrganizationsOrgIdTargetsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return []TargetInfo
func (a *DefaultApiService) OrganizationsOrgIdTargetsGetExecute(r ApiOrganizationsOrgIdTargetsGetRequest) ([]TargetInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TargetInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTargetsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/targets"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdTargetsIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	id string
}

func (r ApiOrganizationsOrgIdTargetsIdGetRequest) Execute() (*TargetInfo, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdTargetsIdGetExecute(r)
}

/*
OrganizationsOrgIdTargetsIdGet Method for OrganizationsOrgIdTargetsIdGet

get the target

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @param id
 @return ApiOrganizationsOrgIdTargetsIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdTargetsIdGet(ctx context.Context, orgId string, id string) ApiOrganizationsOrgIdTargetsIdGetRequest {
	return ApiOrganizationsOrgIdTargetsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		id: id,
	}
}

// Execute executes the request
//  @return TargetInfo
func (a *DefaultApiService) OrganizationsOrgIdTargetsIdGetExecute(r ApiOrganizationsOrgIdTargetsIdGetRequest) (*TargetInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TargetInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTargetsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/targets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdTransitgatewaysGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
}

func (r ApiOrganizationsOrgIdTransitgatewaysGetRequest) Execute() ([]PrivateSpaceTransitGateway, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdTransitgatewaysGetExecute(r)
}

/*
OrganizationsOrgIdTransitgatewaysGet Method for OrganizationsOrgIdTransitgatewaysGet

get list of TGW connections assocated with an organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiOrganizationsOrgIdTransitgatewaysGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdTransitgatewaysGet(ctx context.Context, orgId string) ApiOrganizationsOrgIdTransitgatewaysGetRequest {
	return ApiOrganizationsOrgIdTransitgatewaysGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return []PrivateSpaceTransitGateway
func (a *DefaultApiService) OrganizationsOrgIdTransitgatewaysGetExecute(r ApiOrganizationsOrgIdTransitgatewaysGetRequest) ([]PrivateSpaceTransitGateway, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrivateSpaceTransitGateway
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTransitgatewaysGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/transitgateways"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdTransitgatewaysTgwIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	tgwId string
}

func (r ApiOrganizationsOrgIdTransitgatewaysTgwIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdTransitgatewaysTgwIdDeleteExecute(r)
}

/*
OrganizationsOrgIdTransitgatewaysTgwIdDelete Method for OrganizationsOrgIdTransitgatewaysTgwIdDelete

Remove the Transit gateway from your Anypoint Platform organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @param tgwId
 @return ApiOrganizationsOrgIdTransitgatewaysTgwIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdTransitgatewaysTgwIdDelete(ctx context.Context, orgId string, tgwId string) ApiOrganizationsOrgIdTransitgatewaysTgwIdDeleteRequest {
	return ApiOrganizationsOrgIdTransitgatewaysTgwIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		tgwId: tgwId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdTransitgatewaysTgwIdDeleteExecute(r ApiOrganizationsOrgIdTransitgatewaysTgwIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTransitgatewaysTgwIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/transitgateways/{tgwId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrganizationsOrgIdTransitgatewaysTgwIdRoutesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	tgwId string
}

func (r ApiOrganizationsOrgIdTransitgatewaysTgwIdRoutesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdTransitgatewaysTgwIdRoutesGetExecute(r)
}

/*
OrganizationsOrgIdTransitgatewaysTgwIdRoutesGet Method for OrganizationsOrgIdTransitgatewaysTgwIdRoutesGet

get TGW routes configured for a gateway

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @param tgwId
 @return ApiOrganizationsOrgIdTransitgatewaysTgwIdRoutesGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdTransitgatewaysTgwIdRoutesGet(ctx context.Context, orgId string, tgwId string) ApiOrganizationsOrgIdTransitgatewaysTgwIdRoutesGetRequest {
	return ApiOrganizationsOrgIdTransitgatewaysTgwIdRoutesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		tgwId: tgwId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdTransitgatewaysTgwIdRoutesGetExecute(r ApiOrganizationsOrgIdTransitgatewaysTgwIdRoutesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTransitgatewaysTgwIdRoutesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/transitgateways/{tgwId}/routes"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tgwId"+"}", url.PathEscape(parameterValueToString(r.tgwId, "tgwId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
