/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Items7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Items7{}

// Items7 struct for Items7
type Items7 struct {
	// Connection id for the vpn. 
	VpnConnectionId *string `json:"vpnConnectionId,omitempty"`
	// The pre-shared key that the customer will use to make a connection. 
	Psk *string `json:"psk,omitempty"`
	// The Point-To-Point CIDR range that the customer will use for connections. 
	PtpCidr *string `json:"ptpCidr,omitempty"`
	// Local external ip address for the tunnel. 
	LocalExternalIpAddress *string `json:"localExternalIpAddress,omitempty"`
	// Local Point-To-Point ip address for tunnel. 
	LocalPtpIpAddress *string `json:"localPtpIpAddress,omitempty"`
	// Remote Point-To-Point ip address for tunnel. 
	RemotePtpIpAddress *string `json:"remotePtpIpAddress,omitempty"`
	// The action to take when the establishing the tunnel for the VPN connection. By default, CGW must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. 
	StartupAction *string `json:"startupAction,omitempty"`
	// The action to take after Dead Peer Detection timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. 
	DPDTimeoutAction *string `json:"dPDTimeoutAction,omitempty"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. 
	RekeyMarginInSeconds *int32 `json:"rekeyMarginInSeconds,omitempty"`
	// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. 
	RekeyFuzz *int32 `json:"rekeyFuzz,omitempty"`
	// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1,ikev2 
	IkeVersions []string `json:"ikeVersions,omitempty"`
	// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2,14,15,16,17,18,19,20,21,22,23,24 
	Phase1DhGroups []int32 `json:"phase1DhGroups,omitempty"`
	// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2,5,14,15,16,17,18,19,20,21,22,23,24 
	Phase2DhGroups []int32 `json:"phase2DhGroups,omitempty"`
	// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128,AES256,AES128-GCM-16,AES256-GCM-16 
	Phase1EncryptionAlgorithms []string `json:"phase1EncryptionAlgorithms,omitempty"`
	// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128,AES256,AES128-GCM-16,AES256-GCM-16 
	Phase2EncryptionAlgorithms []string `json:"phase2EncryptionAlgorithms,omitempty"`
	// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1,SHA2-256,SHA2-384,SHA2-512 
	Phase1IntegrityAlgorithms []string `json:"phase1IntegrityAlgorithms,omitempty"`
	// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1,SHA2-256,SHA2-384,SHA2-512 
	Phase2IntegrityAlgorithms []string `json:"phase2IntegrityAlgorithms,omitempty"`
	// Accepted route count for the tunnel. 
	AcceptedRouteCount *float32 `json:"acceptedRouteCount,omitempty"`
	// Last status change for the tunnel. 
	LastStatusChange *string `json:"lastStatusChange,omitempty"`
	// Status for the tunnel. 
	Status *string `json:"status,omitempty"`
	// Status message for the tunnel. 
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// NewItems7 instantiates a new Items7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItems7() *Items7 {
	this := Items7{}
	return &this
}

// NewItems7WithDefaults instantiates a new Items7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItems7WithDefaults() *Items7 {
	this := Items7{}
	return &this
}

// GetVpnConnectionId returns the VpnConnectionId field value if set, zero value otherwise.
func (o *Items7) GetVpnConnectionId() string {
	if o == nil || IsNil(o.VpnConnectionId) {
		var ret string
		return ret
	}
	return *o.VpnConnectionId
}

// GetVpnConnectionIdOk returns a tuple with the VpnConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetVpnConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VpnConnectionId) {
		return nil, false
	}
	return o.VpnConnectionId, true
}

// HasVpnConnectionId returns a boolean if a field has been set.
func (o *Items7) HasVpnConnectionId() bool {
	if o != nil && !IsNil(o.VpnConnectionId) {
		return true
	}

	return false
}

// SetVpnConnectionId gets a reference to the given string and assigns it to the VpnConnectionId field.
func (o *Items7) SetVpnConnectionId(v string) {
	o.VpnConnectionId = &v
}

// GetPsk returns the Psk field value if set, zero value otherwise.
func (o *Items7) GetPsk() string {
	if o == nil || IsNil(o.Psk) {
		var ret string
		return ret
	}
	return *o.Psk
}

// GetPskOk returns a tuple with the Psk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPskOk() (*string, bool) {
	if o == nil || IsNil(o.Psk) {
		return nil, false
	}
	return o.Psk, true
}

// HasPsk returns a boolean if a field has been set.
func (o *Items7) HasPsk() bool {
	if o != nil && !IsNil(o.Psk) {
		return true
	}

	return false
}

// SetPsk gets a reference to the given string and assigns it to the Psk field.
func (o *Items7) SetPsk(v string) {
	o.Psk = &v
}

// GetPtpCidr returns the PtpCidr field value if set, zero value otherwise.
func (o *Items7) GetPtpCidr() string {
	if o == nil || IsNil(o.PtpCidr) {
		var ret string
		return ret
	}
	return *o.PtpCidr
}

// GetPtpCidrOk returns a tuple with the PtpCidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPtpCidrOk() (*string, bool) {
	if o == nil || IsNil(o.PtpCidr) {
		return nil, false
	}
	return o.PtpCidr, true
}

// HasPtpCidr returns a boolean if a field has been set.
func (o *Items7) HasPtpCidr() bool {
	if o != nil && !IsNil(o.PtpCidr) {
		return true
	}

	return false
}

// SetPtpCidr gets a reference to the given string and assigns it to the PtpCidr field.
func (o *Items7) SetPtpCidr(v string) {
	o.PtpCidr = &v
}

// GetLocalExternalIpAddress returns the LocalExternalIpAddress field value if set, zero value otherwise.
func (o *Items7) GetLocalExternalIpAddress() string {
	if o == nil || IsNil(o.LocalExternalIpAddress) {
		var ret string
		return ret
	}
	return *o.LocalExternalIpAddress
}

// GetLocalExternalIpAddressOk returns a tuple with the LocalExternalIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetLocalExternalIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LocalExternalIpAddress) {
		return nil, false
	}
	return o.LocalExternalIpAddress, true
}

// HasLocalExternalIpAddress returns a boolean if a field has been set.
func (o *Items7) HasLocalExternalIpAddress() bool {
	if o != nil && !IsNil(o.LocalExternalIpAddress) {
		return true
	}

	return false
}

// SetLocalExternalIpAddress gets a reference to the given string and assigns it to the LocalExternalIpAddress field.
func (o *Items7) SetLocalExternalIpAddress(v string) {
	o.LocalExternalIpAddress = &v
}

// GetLocalPtpIpAddress returns the LocalPtpIpAddress field value if set, zero value otherwise.
func (o *Items7) GetLocalPtpIpAddress() string {
	if o == nil || IsNil(o.LocalPtpIpAddress) {
		var ret string
		return ret
	}
	return *o.LocalPtpIpAddress
}

// GetLocalPtpIpAddressOk returns a tuple with the LocalPtpIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetLocalPtpIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LocalPtpIpAddress) {
		return nil, false
	}
	return o.LocalPtpIpAddress, true
}

// HasLocalPtpIpAddress returns a boolean if a field has been set.
func (o *Items7) HasLocalPtpIpAddress() bool {
	if o != nil && !IsNil(o.LocalPtpIpAddress) {
		return true
	}

	return false
}

// SetLocalPtpIpAddress gets a reference to the given string and assigns it to the LocalPtpIpAddress field.
func (o *Items7) SetLocalPtpIpAddress(v string) {
	o.LocalPtpIpAddress = &v
}

// GetRemotePtpIpAddress returns the RemotePtpIpAddress field value if set, zero value otherwise.
func (o *Items7) GetRemotePtpIpAddress() string {
	if o == nil || IsNil(o.RemotePtpIpAddress) {
		var ret string
		return ret
	}
	return *o.RemotePtpIpAddress
}

// GetRemotePtpIpAddressOk returns a tuple with the RemotePtpIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetRemotePtpIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RemotePtpIpAddress) {
		return nil, false
	}
	return o.RemotePtpIpAddress, true
}

// HasRemotePtpIpAddress returns a boolean if a field has been set.
func (o *Items7) HasRemotePtpIpAddress() bool {
	if o != nil && !IsNil(o.RemotePtpIpAddress) {
		return true
	}

	return false
}

// SetRemotePtpIpAddress gets a reference to the given string and assigns it to the RemotePtpIpAddress field.
func (o *Items7) SetRemotePtpIpAddress(v string) {
	o.RemotePtpIpAddress = &v
}

// GetStartupAction returns the StartupAction field value if set, zero value otherwise.
func (o *Items7) GetStartupAction() string {
	if o == nil || IsNil(o.StartupAction) {
		var ret string
		return ret
	}
	return *o.StartupAction
}

// GetStartupActionOk returns a tuple with the StartupAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetStartupActionOk() (*string, bool) {
	if o == nil || IsNil(o.StartupAction) {
		return nil, false
	}
	return o.StartupAction, true
}

// HasStartupAction returns a boolean if a field has been set.
func (o *Items7) HasStartupAction() bool {
	if o != nil && !IsNil(o.StartupAction) {
		return true
	}

	return false
}

// SetStartupAction gets a reference to the given string and assigns it to the StartupAction field.
func (o *Items7) SetStartupAction(v string) {
	o.StartupAction = &v
}

// GetDPDTimeoutAction returns the DPDTimeoutAction field value if set, zero value otherwise.
func (o *Items7) GetDPDTimeoutAction() string {
	if o == nil || IsNil(o.DPDTimeoutAction) {
		var ret string
		return ret
	}
	return *o.DPDTimeoutAction
}

// GetDPDTimeoutActionOk returns a tuple with the DPDTimeoutAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetDPDTimeoutActionOk() (*string, bool) {
	if o == nil || IsNil(o.DPDTimeoutAction) {
		return nil, false
	}
	return o.DPDTimeoutAction, true
}

// HasDPDTimeoutAction returns a boolean if a field has been set.
func (o *Items7) HasDPDTimeoutAction() bool {
	if o != nil && !IsNil(o.DPDTimeoutAction) {
		return true
	}

	return false
}

// SetDPDTimeoutAction gets a reference to the given string and assigns it to the DPDTimeoutAction field.
func (o *Items7) SetDPDTimeoutAction(v string) {
	o.DPDTimeoutAction = &v
}

// GetRekeyMarginInSeconds returns the RekeyMarginInSeconds field value if set, zero value otherwise.
func (o *Items7) GetRekeyMarginInSeconds() int32 {
	if o == nil || IsNil(o.RekeyMarginInSeconds) {
		var ret int32
		return ret
	}
	return *o.RekeyMarginInSeconds
}

// GetRekeyMarginInSecondsOk returns a tuple with the RekeyMarginInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetRekeyMarginInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.RekeyMarginInSeconds) {
		return nil, false
	}
	return o.RekeyMarginInSeconds, true
}

// HasRekeyMarginInSeconds returns a boolean if a field has been set.
func (o *Items7) HasRekeyMarginInSeconds() bool {
	if o != nil && !IsNil(o.RekeyMarginInSeconds) {
		return true
	}

	return false
}

// SetRekeyMarginInSeconds gets a reference to the given int32 and assigns it to the RekeyMarginInSeconds field.
func (o *Items7) SetRekeyMarginInSeconds(v int32) {
	o.RekeyMarginInSeconds = &v
}

// GetRekeyFuzz returns the RekeyFuzz field value if set, zero value otherwise.
func (o *Items7) GetRekeyFuzz() int32 {
	if o == nil || IsNil(o.RekeyFuzz) {
		var ret int32
		return ret
	}
	return *o.RekeyFuzz
}

// GetRekeyFuzzOk returns a tuple with the RekeyFuzz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetRekeyFuzzOk() (*int32, bool) {
	if o == nil || IsNil(o.RekeyFuzz) {
		return nil, false
	}
	return o.RekeyFuzz, true
}

// HasRekeyFuzz returns a boolean if a field has been set.
func (o *Items7) HasRekeyFuzz() bool {
	if o != nil && !IsNil(o.RekeyFuzz) {
		return true
	}

	return false
}

// SetRekeyFuzz gets a reference to the given int32 and assigns it to the RekeyFuzz field.
func (o *Items7) SetRekeyFuzz(v int32) {
	o.RekeyFuzz = &v
}

// GetIkeVersions returns the IkeVersions field value if set, zero value otherwise.
func (o *Items7) GetIkeVersions() []string {
	if o == nil || IsNil(o.IkeVersions) {
		var ret []string
		return ret
	}
	return o.IkeVersions
}

// GetIkeVersionsOk returns a tuple with the IkeVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetIkeVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.IkeVersions) {
		return nil, false
	}
	return o.IkeVersions, true
}

// HasIkeVersions returns a boolean if a field has been set.
func (o *Items7) HasIkeVersions() bool {
	if o != nil && !IsNil(o.IkeVersions) {
		return true
	}

	return false
}

// SetIkeVersions gets a reference to the given []string and assigns it to the IkeVersions field.
func (o *Items7) SetIkeVersions(v []string) {
	o.IkeVersions = v
}

// GetPhase1DhGroups returns the Phase1DhGroups field value if set, zero value otherwise.
func (o *Items7) GetPhase1DhGroups() []int32 {
	if o == nil || IsNil(o.Phase1DhGroups) {
		var ret []int32
		return ret
	}
	return o.Phase1DhGroups
}

// GetPhase1DhGroupsOk returns a tuple with the Phase1DhGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPhase1DhGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Phase1DhGroups) {
		return nil, false
	}
	return o.Phase1DhGroups, true
}

// HasPhase1DhGroups returns a boolean if a field has been set.
func (o *Items7) HasPhase1DhGroups() bool {
	if o != nil && !IsNil(o.Phase1DhGroups) {
		return true
	}

	return false
}

// SetPhase1DhGroups gets a reference to the given []int32 and assigns it to the Phase1DhGroups field.
func (o *Items7) SetPhase1DhGroups(v []int32) {
	o.Phase1DhGroups = v
}

// GetPhase2DhGroups returns the Phase2DhGroups field value if set, zero value otherwise.
func (o *Items7) GetPhase2DhGroups() []int32 {
	if o == nil || IsNil(o.Phase2DhGroups) {
		var ret []int32
		return ret
	}
	return o.Phase2DhGroups
}

// GetPhase2DhGroupsOk returns a tuple with the Phase2DhGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPhase2DhGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Phase2DhGroups) {
		return nil, false
	}
	return o.Phase2DhGroups, true
}

// HasPhase2DhGroups returns a boolean if a field has been set.
func (o *Items7) HasPhase2DhGroups() bool {
	if o != nil && !IsNil(o.Phase2DhGroups) {
		return true
	}

	return false
}

// SetPhase2DhGroups gets a reference to the given []int32 and assigns it to the Phase2DhGroups field.
func (o *Items7) SetPhase2DhGroups(v []int32) {
	o.Phase2DhGroups = v
}

// GetPhase1EncryptionAlgorithms returns the Phase1EncryptionAlgorithms field value if set, zero value otherwise.
func (o *Items7) GetPhase1EncryptionAlgorithms() []string {
	if o == nil || IsNil(o.Phase1EncryptionAlgorithms) {
		var ret []string
		return ret
	}
	return o.Phase1EncryptionAlgorithms
}

// GetPhase1EncryptionAlgorithmsOk returns a tuple with the Phase1EncryptionAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPhase1EncryptionAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Phase1EncryptionAlgorithms) {
		return nil, false
	}
	return o.Phase1EncryptionAlgorithms, true
}

// HasPhase1EncryptionAlgorithms returns a boolean if a field has been set.
func (o *Items7) HasPhase1EncryptionAlgorithms() bool {
	if o != nil && !IsNil(o.Phase1EncryptionAlgorithms) {
		return true
	}

	return false
}

// SetPhase1EncryptionAlgorithms gets a reference to the given []string and assigns it to the Phase1EncryptionAlgorithms field.
func (o *Items7) SetPhase1EncryptionAlgorithms(v []string) {
	o.Phase1EncryptionAlgorithms = v
}

// GetPhase2EncryptionAlgorithms returns the Phase2EncryptionAlgorithms field value if set, zero value otherwise.
func (o *Items7) GetPhase2EncryptionAlgorithms() []string {
	if o == nil || IsNil(o.Phase2EncryptionAlgorithms) {
		var ret []string
		return ret
	}
	return o.Phase2EncryptionAlgorithms
}

// GetPhase2EncryptionAlgorithmsOk returns a tuple with the Phase2EncryptionAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPhase2EncryptionAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Phase2EncryptionAlgorithms) {
		return nil, false
	}
	return o.Phase2EncryptionAlgorithms, true
}

// HasPhase2EncryptionAlgorithms returns a boolean if a field has been set.
func (o *Items7) HasPhase2EncryptionAlgorithms() bool {
	if o != nil && !IsNil(o.Phase2EncryptionAlgorithms) {
		return true
	}

	return false
}

// SetPhase2EncryptionAlgorithms gets a reference to the given []string and assigns it to the Phase2EncryptionAlgorithms field.
func (o *Items7) SetPhase2EncryptionAlgorithms(v []string) {
	o.Phase2EncryptionAlgorithms = v
}

// GetPhase1IntegrityAlgorithms returns the Phase1IntegrityAlgorithms field value if set, zero value otherwise.
func (o *Items7) GetPhase1IntegrityAlgorithms() []string {
	if o == nil || IsNil(o.Phase1IntegrityAlgorithms) {
		var ret []string
		return ret
	}
	return o.Phase1IntegrityAlgorithms
}

// GetPhase1IntegrityAlgorithmsOk returns a tuple with the Phase1IntegrityAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPhase1IntegrityAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Phase1IntegrityAlgorithms) {
		return nil, false
	}
	return o.Phase1IntegrityAlgorithms, true
}

// HasPhase1IntegrityAlgorithms returns a boolean if a field has been set.
func (o *Items7) HasPhase1IntegrityAlgorithms() bool {
	if o != nil && !IsNil(o.Phase1IntegrityAlgorithms) {
		return true
	}

	return false
}

// SetPhase1IntegrityAlgorithms gets a reference to the given []string and assigns it to the Phase1IntegrityAlgorithms field.
func (o *Items7) SetPhase1IntegrityAlgorithms(v []string) {
	o.Phase1IntegrityAlgorithms = v
}

// GetPhase2IntegrityAlgorithms returns the Phase2IntegrityAlgorithms field value if set, zero value otherwise.
func (o *Items7) GetPhase2IntegrityAlgorithms() []string {
	if o == nil || IsNil(o.Phase2IntegrityAlgorithms) {
		var ret []string
		return ret
	}
	return o.Phase2IntegrityAlgorithms
}

// GetPhase2IntegrityAlgorithmsOk returns a tuple with the Phase2IntegrityAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetPhase2IntegrityAlgorithmsOk() ([]string, bool) {
	if o == nil || IsNil(o.Phase2IntegrityAlgorithms) {
		return nil, false
	}
	return o.Phase2IntegrityAlgorithms, true
}

// HasPhase2IntegrityAlgorithms returns a boolean if a field has been set.
func (o *Items7) HasPhase2IntegrityAlgorithms() bool {
	if o != nil && !IsNil(o.Phase2IntegrityAlgorithms) {
		return true
	}

	return false
}

// SetPhase2IntegrityAlgorithms gets a reference to the given []string and assigns it to the Phase2IntegrityAlgorithms field.
func (o *Items7) SetPhase2IntegrityAlgorithms(v []string) {
	o.Phase2IntegrityAlgorithms = v
}

// GetAcceptedRouteCount returns the AcceptedRouteCount field value if set, zero value otherwise.
func (o *Items7) GetAcceptedRouteCount() float32 {
	if o == nil || IsNil(o.AcceptedRouteCount) {
		var ret float32
		return ret
	}
	return *o.AcceptedRouteCount
}

// GetAcceptedRouteCountOk returns a tuple with the AcceptedRouteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetAcceptedRouteCountOk() (*float32, bool) {
	if o == nil || IsNil(o.AcceptedRouteCount) {
		return nil, false
	}
	return o.AcceptedRouteCount, true
}

// HasAcceptedRouteCount returns a boolean if a field has been set.
func (o *Items7) HasAcceptedRouteCount() bool {
	if o != nil && !IsNil(o.AcceptedRouteCount) {
		return true
	}

	return false
}

// SetAcceptedRouteCount gets a reference to the given float32 and assigns it to the AcceptedRouteCount field.
func (o *Items7) SetAcceptedRouteCount(v float32) {
	o.AcceptedRouteCount = &v
}

// GetLastStatusChange returns the LastStatusChange field value if set, zero value otherwise.
func (o *Items7) GetLastStatusChange() string {
	if o == nil || IsNil(o.LastStatusChange) {
		var ret string
		return ret
	}
	return *o.LastStatusChange
}

// GetLastStatusChangeOk returns a tuple with the LastStatusChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetLastStatusChangeOk() (*string, bool) {
	if o == nil || IsNil(o.LastStatusChange) {
		return nil, false
	}
	return o.LastStatusChange, true
}

// HasLastStatusChange returns a boolean if a field has been set.
func (o *Items7) HasLastStatusChange() bool {
	if o != nil && !IsNil(o.LastStatusChange) {
		return true
	}

	return false
}

// SetLastStatusChange gets a reference to the given string and assigns it to the LastStatusChange field.
func (o *Items7) SetLastStatusChange(v string) {
	o.LastStatusChange = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Items7) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Items7) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Items7) SetStatus(v string) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *Items7) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Items7) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *Items7) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *Items7) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

func (o Items7) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Items7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VpnConnectionId) {
		toSerialize["vpnConnectionId"] = o.VpnConnectionId
	}
	if !IsNil(o.Psk) {
		toSerialize["psk"] = o.Psk
	}
	if !IsNil(o.PtpCidr) {
		toSerialize["ptpCidr"] = o.PtpCidr
	}
	if !IsNil(o.LocalExternalIpAddress) {
		toSerialize["localExternalIpAddress"] = o.LocalExternalIpAddress
	}
	if !IsNil(o.LocalPtpIpAddress) {
		toSerialize["localPtpIpAddress"] = o.LocalPtpIpAddress
	}
	if !IsNil(o.RemotePtpIpAddress) {
		toSerialize["remotePtpIpAddress"] = o.RemotePtpIpAddress
	}
	if !IsNil(o.StartupAction) {
		toSerialize["startupAction"] = o.StartupAction
	}
	if !IsNil(o.DPDTimeoutAction) {
		toSerialize["dPDTimeoutAction"] = o.DPDTimeoutAction
	}
	if !IsNil(o.RekeyMarginInSeconds) {
		toSerialize["rekeyMarginInSeconds"] = o.RekeyMarginInSeconds
	}
	if !IsNil(o.RekeyFuzz) {
		toSerialize["rekeyFuzz"] = o.RekeyFuzz
	}
	if !IsNil(o.IkeVersions) {
		toSerialize["ikeVersions"] = o.IkeVersions
	}
	if !IsNil(o.Phase1DhGroups) {
		toSerialize["phase1DhGroups"] = o.Phase1DhGroups
	}
	if !IsNil(o.Phase2DhGroups) {
		toSerialize["phase2DhGroups"] = o.Phase2DhGroups
	}
	if !IsNil(o.Phase1EncryptionAlgorithms) {
		toSerialize["phase1EncryptionAlgorithms"] = o.Phase1EncryptionAlgorithms
	}
	if !IsNil(o.Phase2EncryptionAlgorithms) {
		toSerialize["phase2EncryptionAlgorithms"] = o.Phase2EncryptionAlgorithms
	}
	if !IsNil(o.Phase1IntegrityAlgorithms) {
		toSerialize["phase1IntegrityAlgorithms"] = o.Phase1IntegrityAlgorithms
	}
	if !IsNil(o.Phase2IntegrityAlgorithms) {
		toSerialize["phase2IntegrityAlgorithms"] = o.Phase2IntegrityAlgorithms
	}
	if !IsNil(o.AcceptedRouteCount) {
		toSerialize["acceptedRouteCount"] = o.AcceptedRouteCount
	}
	if !IsNil(o.LastStatusChange) {
		toSerialize["lastStatusChange"] = o.LastStatusChange
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	return toSerialize, nil
}

type NullableItems7 struct {
	value *Items7
	isSet bool
}

func (v NullableItems7) Get() *Items7 {
	return v.value
}

func (v *NullableItems7) Set(val *Items7) {
	v.value = val
	v.isSet = true
}

func (v NullableItems7) IsSet() bool {
	return v.isSet
}

func (v *NullableItems7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItems7(val *Items7) *NullableItems7 {
	return &NullableItems7{value: val, isSet: true}
}

func (v NullableItems7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItems7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


