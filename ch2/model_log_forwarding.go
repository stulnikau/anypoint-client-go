/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LogForwarding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogForwarding{}

// LogForwarding Private space log forwarding configuration 
type LogForwarding struct {
	// The desired action to push logs to Anypoint monitoring.
	AnypointMonitoring *bool `json:"anypointMonitoring,omitempty"`
}

// NewLogForwarding instantiates a new LogForwarding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogForwarding() *LogForwarding {
	this := LogForwarding{}
	return &this
}

// NewLogForwardingWithDefaults instantiates a new LogForwarding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogForwardingWithDefaults() *LogForwarding {
	this := LogForwarding{}
	return &this
}

// GetAnypointMonitoring returns the AnypointMonitoring field value if set, zero value otherwise.
func (o *LogForwarding) GetAnypointMonitoring() bool {
	if o == nil || IsNil(o.AnypointMonitoring) {
		var ret bool
		return ret
	}
	return *o.AnypointMonitoring
}

// GetAnypointMonitoringOk returns a tuple with the AnypointMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarding) GetAnypointMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.AnypointMonitoring) {
		return nil, false
	}
	return o.AnypointMonitoring, true
}

// HasAnypointMonitoring returns a boolean if a field has been set.
func (o *LogForwarding) HasAnypointMonitoring() bool {
	if o != nil && !IsNil(o.AnypointMonitoring) {
		return true
	}

	return false
}

// SetAnypointMonitoring gets a reference to the given bool and assigns it to the AnypointMonitoring field.
func (o *LogForwarding) SetAnypointMonitoring(v bool) {
	o.AnypointMonitoring = &v
}

func (o LogForwarding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogForwarding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnypointMonitoring) {
		toSerialize["anypointMonitoring"] = o.AnypointMonitoring
	}
	return toSerialize, nil
}

type NullableLogForwarding struct {
	value *LogForwarding
	isSet bool
}

func (v NullableLogForwarding) Get() *LogForwarding {
	return v.value
}

func (v *NullableLogForwarding) Set(val *LogForwarding) {
	v.value = val
	v.isSet = true
}

func (v NullableLogForwarding) IsSet() bool {
	return v.isSet
}

func (v *NullableLogForwarding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogForwarding(val *LogForwarding) *NullableLogForwarding {
	return &NullableLogForwarding{value: val, isSet: true}
}

func (v NullableLogForwarding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogForwarding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


