/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Network3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Network3{}

// Network3 Private space network configuration 
type Network3 struct {
	// The region of the Private Space. Required when create a Private Space network.
	Region *string `json:"region,omitempty"`
	// The existing VPC where the Private Space will be created. Required when create a Private Space in existing Anypoint VPC. 
	VpcId *string `json:"vpcId,omitempty"`
	// The CIDR block of the VPC where the Private Space will be created. Required when create a Private Space in a new VPC. Default is 10.0.0.0/16. 
	CidrBlock *string `json:"cidrBlock,omitempty"`
	InternalDns *InternalDns9 `json:"internalDns,omitempty"`
}

// NewNetwork3 instantiates a new Network3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetwork3() *Network3 {
	this := Network3{}
	var cidrBlock string = "10.0.0.0/16"
	this.CidrBlock = &cidrBlock
	return &this
}

// NewNetwork3WithDefaults instantiates a new Network3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetwork3WithDefaults() *Network3 {
	this := Network3{}
	var cidrBlock string = "10.0.0.0/16"
	this.CidrBlock = &cidrBlock
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Network3) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network3) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Network3) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Network3) SetRegion(v string) {
	o.Region = &v
}

// GetVpcId returns the VpcId field value if set, zero value otherwise.
func (o *Network3) GetVpcId() string {
	if o == nil || IsNil(o.VpcId) {
		var ret string
		return ret
	}
	return *o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network3) GetVpcIdOk() (*string, bool) {
	if o == nil || IsNil(o.VpcId) {
		return nil, false
	}
	return o.VpcId, true
}

// HasVpcId returns a boolean if a field has been set.
func (o *Network3) HasVpcId() bool {
	if o != nil && !IsNil(o.VpcId) {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given string and assigns it to the VpcId field.
func (o *Network3) SetVpcId(v string) {
	o.VpcId = &v
}

// GetCidrBlock returns the CidrBlock field value if set, zero value otherwise.
func (o *Network3) GetCidrBlock() string {
	if o == nil || IsNil(o.CidrBlock) {
		var ret string
		return ret
	}
	return *o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network3) GetCidrBlockOk() (*string, bool) {
	if o == nil || IsNil(o.CidrBlock) {
		return nil, false
	}
	return o.CidrBlock, true
}

// HasCidrBlock returns a boolean if a field has been set.
func (o *Network3) HasCidrBlock() bool {
	if o != nil && !IsNil(o.CidrBlock) {
		return true
	}

	return false
}

// SetCidrBlock gets a reference to the given string and assigns it to the CidrBlock field.
func (o *Network3) SetCidrBlock(v string) {
	o.CidrBlock = &v
}

// GetInternalDns returns the InternalDns field value if set, zero value otherwise.
func (o *Network3) GetInternalDns() InternalDns9 {
	if o == nil || IsNil(o.InternalDns) {
		var ret InternalDns9
		return ret
	}
	return *o.InternalDns
}

// GetInternalDnsOk returns a tuple with the InternalDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network3) GetInternalDnsOk() (*InternalDns9, bool) {
	if o == nil || IsNil(o.InternalDns) {
		return nil, false
	}
	return o.InternalDns, true
}

// HasInternalDns returns a boolean if a field has been set.
func (o *Network3) HasInternalDns() bool {
	if o != nil && !IsNil(o.InternalDns) {
		return true
	}

	return false
}

// SetInternalDns gets a reference to the given InternalDns9 and assigns it to the InternalDns field.
func (o *Network3) SetInternalDns(v InternalDns9) {
	o.InternalDns = &v
}

func (o Network3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Network3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.VpcId) {
		toSerialize["vpcId"] = o.VpcId
	}
	if !IsNil(o.CidrBlock) {
		toSerialize["cidrBlock"] = o.CidrBlock
	}
	if !IsNil(o.InternalDns) {
		toSerialize["internalDns"] = o.InternalDns
	}
	return toSerialize, nil
}

type NullableNetwork3 struct {
	value *Network3
	isSet bool
}

func (v NullableNetwork3) Get() *Network3 {
	return v.value
}

func (v *NullableNetwork3) Set(val *Network3) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork3) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork3(val *Network3) *NullableNetwork3 {
	return &NullableNetwork3{value: val, isSet: true}
}

func (v NullableNetwork3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


