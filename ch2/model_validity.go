/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Validity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Validity{}

// Validity Details about validity period of this certificate
type Validity struct {
	NotBefore string `json:"notBefore"`
	NotAfter string `json:"notAfter"`
}

// NewValidity instantiates a new Validity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidity(notBefore string, notAfter string) *Validity {
	this := Validity{}
	this.NotBefore = notBefore
	this.NotAfter = notAfter
	return &this
}

// NewValidityWithDefaults instantiates a new Validity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidityWithDefaults() *Validity {
	this := Validity{}
	return &this
}

// GetNotBefore returns the NotBefore field value
func (o *Validity) GetNotBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *Validity) GetNotBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotBefore, true
}

// SetNotBefore sets field value
func (o *Validity) SetNotBefore(v string) {
	o.NotBefore = v
}

// GetNotAfter returns the NotAfter field value
func (o *Validity) GetNotAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *Validity) GetNotAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotAfter, true
}

// SetNotAfter sets field value
func (o *Validity) SetNotAfter(v string) {
	o.NotAfter = v
}

func (o Validity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Validity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notBefore"] = o.NotBefore
	toSerialize["notAfter"] = o.NotAfter
	return toSerialize, nil
}

type NullableValidity struct {
	value *Validity
	isSet bool
}

func (v NullableValidity) Get() *Validity {
	return v.value
}

func (v *NullableValidity) Set(val *Validity) {
	v.value = val
	v.isSet = true
}

func (v NullableValidity) IsSet() bool {
	return v.isSet
}

func (v *NullableValidity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidity(val *Validity) *NullableValidity {
	return &NullableValidity{value: val, isSet: true}
}

func (v NullableValidity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


