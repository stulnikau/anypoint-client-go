/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeyStoreJks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyStoreJks{}

// KeyStoreJks struct for KeyStoreJks
type KeyStoreJks struct {
	Source string `json:"source"`
	// base64 encoded file contents
	KeystoreBase64 string `json:"keystoreBase64"`
	Alias string `json:"alias"`
	KeyPassphrase string `json:"keyPassphrase"`
	StorePassphrase string `json:"storePassphrase"`
	KeystoreFileName *string `json:"keystoreFileName,omitempty"`
}

// NewKeyStoreJks instantiates a new KeyStoreJks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyStoreJks(source string, keystoreBase64 string, alias string, keyPassphrase string, storePassphrase string) *KeyStoreJks {
	this := KeyStoreJks{}
	this.Source = source
	this.KeystoreBase64 = keystoreBase64
	this.Alias = alias
	this.KeyPassphrase = keyPassphrase
	this.StorePassphrase = storePassphrase
	return &this
}

// NewKeyStoreJksWithDefaults instantiates a new KeyStoreJks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyStoreJksWithDefaults() *KeyStoreJks {
	this := KeyStoreJks{}
	return &this
}

// GetSource returns the Source field value
func (o *KeyStoreJks) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *KeyStoreJks) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *KeyStoreJks) SetSource(v string) {
	o.Source = v
}

// GetKeystoreBase64 returns the KeystoreBase64 field value
func (o *KeyStoreJks) GetKeystoreBase64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeystoreBase64
}

// GetKeystoreBase64Ok returns a tuple with the KeystoreBase64 field value
// and a boolean to check if the value has been set.
func (o *KeyStoreJks) GetKeystoreBase64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeystoreBase64, true
}

// SetKeystoreBase64 sets field value
func (o *KeyStoreJks) SetKeystoreBase64(v string) {
	o.KeystoreBase64 = v
}

// GetAlias returns the Alias field value
func (o *KeyStoreJks) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *KeyStoreJks) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *KeyStoreJks) SetAlias(v string) {
	o.Alias = v
}

// GetKeyPassphrase returns the KeyPassphrase field value
func (o *KeyStoreJks) GetKeyPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyPassphrase
}

// GetKeyPassphraseOk returns a tuple with the KeyPassphrase field value
// and a boolean to check if the value has been set.
func (o *KeyStoreJks) GetKeyPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyPassphrase, true
}

// SetKeyPassphrase sets field value
func (o *KeyStoreJks) SetKeyPassphrase(v string) {
	o.KeyPassphrase = v
}

// GetStorePassphrase returns the StorePassphrase field value
func (o *KeyStoreJks) GetStorePassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorePassphrase
}

// GetStorePassphraseOk returns a tuple with the StorePassphrase field value
// and a boolean to check if the value has been set.
func (o *KeyStoreJks) GetStorePassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorePassphrase, true
}

// SetStorePassphrase sets field value
func (o *KeyStoreJks) SetStorePassphrase(v string) {
	o.StorePassphrase = v
}

// GetKeystoreFileName returns the KeystoreFileName field value if set, zero value otherwise.
func (o *KeyStoreJks) GetKeystoreFileName() string {
	if o == nil || IsNil(o.KeystoreFileName) {
		var ret string
		return ret
	}
	return *o.KeystoreFileName
}

// GetKeystoreFileNameOk returns a tuple with the KeystoreFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStoreJks) GetKeystoreFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeystoreFileName) {
		return nil, false
	}
	return o.KeystoreFileName, true
}

// HasKeystoreFileName returns a boolean if a field has been set.
func (o *KeyStoreJks) HasKeystoreFileName() bool {
	if o != nil && !IsNil(o.KeystoreFileName) {
		return true
	}

	return false
}

// SetKeystoreFileName gets a reference to the given string and assigns it to the KeystoreFileName field.
func (o *KeyStoreJks) SetKeystoreFileName(v string) {
	o.KeystoreFileName = &v
}

func (o KeyStoreJks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyStoreJks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["keystoreBase64"] = o.KeystoreBase64
	toSerialize["alias"] = o.Alias
	toSerialize["keyPassphrase"] = o.KeyPassphrase
	toSerialize["storePassphrase"] = o.StorePassphrase
	if !IsNil(o.KeystoreFileName) {
		toSerialize["keystoreFileName"] = o.KeystoreFileName
	}
	return toSerialize, nil
}

type NullableKeyStoreJks struct {
	value *KeyStoreJks
	isSet bool
}

func (v NullableKeyStoreJks) Get() *KeyStoreJks {
	return v.value
}

func (v *NullableKeyStoreJks) Set(val *KeyStoreJks) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyStoreJks) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyStoreJks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyStoreJks(val *KeyStoreJks) *NullableKeyStoreJks {
	return &NullableKeyStoreJks{value: val, isSet: true}
}

func (v NullableKeyStoreJks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyStoreJks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


