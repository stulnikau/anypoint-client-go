/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeyStoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyStoreResponse{}

// KeyStoreResponse struct for KeyStoreResponse
type KeyStoreResponse struct {
	Type string `json:"type"`
	Cn string `json:"cn"`
	San []string `json:"san"`
	Alias *string `json:"alias,omitempty"`
	// name of the key store file
	FileName string `json:"fileName"`
	KeyFileName *string `json:"keyFileName,omitempty"`
	CapathFileName *string `json:"capathFileName,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
}

// NewKeyStoreResponse instantiates a new KeyStoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyStoreResponse(type_ string, cn string, san []string, fileName string) *KeyStoreResponse {
	this := KeyStoreResponse{}
	this.Type = type_
	this.Cn = cn
	this.San = san
	this.FileName = fileName
	return &this
}

// NewKeyStoreResponseWithDefaults instantiates a new KeyStoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyStoreResponseWithDefaults() *KeyStoreResponse {
	this := KeyStoreResponse{}
	return &this
}

// GetType returns the Type field value
func (o *KeyStoreResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KeyStoreResponse) SetType(v string) {
	o.Type = v
}

// GetCn returns the Cn field value
func (o *KeyStoreResponse) GetCn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cn
}

// GetCnOk returns a tuple with the Cn field value
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetCnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cn, true
}

// SetCn sets field value
func (o *KeyStoreResponse) SetCn(v string) {
	o.Cn = v
}

// GetSan returns the San field value
func (o *KeyStoreResponse) GetSan() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.San
}

// GetSanOk returns a tuple with the San field value
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetSanOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.San, true
}

// SetSan sets field value
func (o *KeyStoreResponse) SetSan(v []string) {
	o.San = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *KeyStoreResponse) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *KeyStoreResponse) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *KeyStoreResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetFileName returns the FileName field value
func (o *KeyStoreResponse) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *KeyStoreResponse) SetFileName(v string) {
	o.FileName = v
}

// GetKeyFileName returns the KeyFileName field value if set, zero value otherwise.
func (o *KeyStoreResponse) GetKeyFileName() string {
	if o == nil || IsNil(o.KeyFileName) {
		var ret string
		return ret
	}
	return *o.KeyFileName
}

// GetKeyFileNameOk returns a tuple with the KeyFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetKeyFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeyFileName) {
		return nil, false
	}
	return o.KeyFileName, true
}

// HasKeyFileName returns a boolean if a field has been set.
func (o *KeyStoreResponse) HasKeyFileName() bool {
	if o != nil && !IsNil(o.KeyFileName) {
		return true
	}

	return false
}

// SetKeyFileName gets a reference to the given string and assigns it to the KeyFileName field.
func (o *KeyStoreResponse) SetKeyFileName(v string) {
	o.KeyFileName = &v
}

// GetCapathFileName returns the CapathFileName field value if set, zero value otherwise.
func (o *KeyStoreResponse) GetCapathFileName() string {
	if o == nil || IsNil(o.CapathFileName) {
		var ret string
		return ret
	}
	return *o.CapathFileName
}

// GetCapathFileNameOk returns a tuple with the CapathFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetCapathFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CapathFileName) {
		return nil, false
	}
	return o.CapathFileName, true
}

// HasCapathFileName returns a boolean if a field has been set.
func (o *KeyStoreResponse) HasCapathFileName() bool {
	if o != nil && !IsNil(o.CapathFileName) {
		return true
	}

	return false
}

// SetCapathFileName gets a reference to the given string and assigns it to the CapathFileName field.
func (o *KeyStoreResponse) SetCapathFileName(v string) {
	o.CapathFileName = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *KeyStoreResponse) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStoreResponse) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KeyStoreResponse) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *KeyStoreResponse) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

func (o KeyStoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyStoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["cn"] = o.Cn
	toSerialize["san"] = o.San
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	toSerialize["fileName"] = o.FileName
	if !IsNil(o.KeyFileName) {
		toSerialize["keyFileName"] = o.KeyFileName
	}
	if !IsNil(o.CapathFileName) {
		toSerialize["capathFileName"] = o.CapathFileName
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	return toSerialize, nil
}

type NullableKeyStoreResponse struct {
	value *KeyStoreResponse
	isSet bool
}

func (v NullableKeyStoreResponse) Get() *KeyStoreResponse {
	return v.value
}

func (v *NullableKeyStoreResponse) Set(val *KeyStoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyStoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyStoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyStoreResponse(val *KeyStoreResponse) *NullableKeyStoreResponse {
	return &NullableKeyStoreResponse{value: val, isSet: true}
}

func (v NullableKeyStoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyStoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


