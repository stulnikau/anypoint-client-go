/*
CH2 Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SupportedRuntime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedRuntime{}

// SupportedRuntime struct for SupportedRuntime
type SupportedRuntime struct {
	Type string `json:"type"`
	Versions []SupportedRuntimeVersion `json:"versions,omitempty"`
}

// NewSupportedRuntime instantiates a new SupportedRuntime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedRuntime(type_ string) *SupportedRuntime {
	this := SupportedRuntime{}
	this.Type = type_
	return &this
}

// NewSupportedRuntimeWithDefaults instantiates a new SupportedRuntime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedRuntimeWithDefaults() *SupportedRuntime {
	this := SupportedRuntime{}
	return &this
}

// GetType returns the Type field value
func (o *SupportedRuntime) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupportedRuntime) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupportedRuntime) SetType(v string) {
	o.Type = v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *SupportedRuntime) GetVersions() []SupportedRuntimeVersion {
	if o == nil || IsNil(o.Versions) {
		var ret []SupportedRuntimeVersion
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedRuntime) GetVersionsOk() ([]SupportedRuntimeVersion, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *SupportedRuntime) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []SupportedRuntimeVersion and assigns it to the Versions field.
func (o *SupportedRuntime) SetVersions(v []SupportedRuntimeVersion) {
	o.Versions = v
}

func (o SupportedRuntime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedRuntime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableSupportedRuntime struct {
	value *SupportedRuntime
	isSet bool
}

func (v NullableSupportedRuntime) Get() *SupportedRuntime {
	return v.value
}

func (v *NullableSupportedRuntime) Set(val *SupportedRuntime) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedRuntime) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedRuntime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedRuntime(val *SupportedRuntime) *NullableSupportedRuntime {
	return &NullableSupportedRuntime{value: val, isSet: true}
}

func (v NullableSupportedRuntime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedRuntime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


